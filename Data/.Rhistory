print("AIC")
AIC
```
### Respiration vs Richness
#### Field
```{r max3, echo=FALSE,,warning=FALSE, message=FALSE}
all.field.peaks = all.field[order(all.field$Total_number_of_peaks),]
field.step = (max(all.field.peaks$Total_number_of_peaks)- min(all.field.peaks$Total_number_of_peaks))/(ideal.num.segments)
peak.segments = as.data.frame(matrix(NA,ncol = 4,nrow = ideal.num.segments))
colnames(peak.segments)= c("Low.boundary","High.boundary","Max.resp","Mid.peaks")
temp.low = min(all.field.peaks$Total_number_of_peaks)
for (i in 1:ideal.num.segments){
if (i ==10){
temp.high = temp.low + field.step
temp.high = plyr::round_any(temp.high, 0.0001, f = ceiling)
temp.dat = all.field.peaks[which(all.field.peaks$Total_number_of_peaks >= temp.low & all.field.peaks$Total_number_of_peaks <= temp.high),]
}else {
temp.high = temp.low + field.step
temp.dat = all.field.peaks[which(all.field.peaks$Total_number_of_peaks >= temp.low & all.field.peaks$Total_number_of_peaks <= temp.high),]
}
if (nrow(temp.dat) > 0){
temp.rate = max(all.field.peaks$rate_mg_per_L_per_h[which(all.field.peaks$Total_number_of_peaks >= temp.low & all.field.peaks$Total_number_of_peaks <= temp.high)])
temp.mid =  temp.dat$Total_number_of_peaks[which(temp.dat$rate_mg_per_L_per_h %in% temp.rate)]
peak.segments$Low.boundary[i] = temp.low
peak.segments$High.boundary[i] = temp.high
peak.segments$Max.resp[i] = temp.rate
peak.segments$Mid.peaks[i] = temp.mid
temp.low = temp.high
} else if (nrow(temp.dat) == 0){
temp.rate = NA
temp.mid =  NA
peak.segments$Low.boundary[i] = temp.low
peak.segments$High.boundary[i] = temp.high
peak.segments$Max.resp[i] = temp.rate
peak.segments$Mid.peaks[i] = temp.mid
temp.low = temp.high
}
}
## Plot exp relationships
x = peak.segments$Mid.peaks
y = peak.segments$Max.resp
label.x = "Richness"
label.y = "Max_Resp_rate_mg_per_L_per_h"
dfi=as.data.frame(cbind(y,x))
names(dfi)[1]="y";names(dfi)[2]="x"
dfi=na.omit(dfi)
#Plots
library (ggpmisc)
my.formula <- y ~ x
ggplot(dfi, aes(x = x, y = y)) +
coord_cartesian( ylim = c(-5,82))+
#coord_cartesian()+
geom_point(size = 5,color = "#32287d") +
geom_point(data=all.field.peaks, aes(x=Total_number_of_peaks, y= rate_mg_per_L_per_h), size = 3, color= "#a29bd5") +
geom_point(size = 5,color = "#32287d") +
geom_smooth(method = "lm", se=TRUE, formula = my.formula) +
stat_poly_eq(formula = my.formula,label.y = "top",label.x = "left", aes(label = paste( ..rr.label..,..eq.label.., sep = "~~~"),size=4),parse = TRUE)+
stat_fit_glance(data=dfi, method = 'lm',
method.args = list(formula = my.formula),
geom = 'text',
aes(label =paste("p = ",signif(..p.value.., digits = 2), sep = ""),size=4),label.y = "top",label.x = "right")+
theme_bw()+theme(legend.title = element_blank(),  legend.background = element_rect(fill = 'NA'), legend.text = element_text(size=12,face="bold"))+labs(y = label.y, x = label.x)+
#theme(legend.position=c(0.7,0.2))+
theme(axis.text.x=element_text(size=12,face="bold"))+theme(axis.text.x=element_text(colour = c("black","black")))+
#theme(aspect.ratio=1)+
theme(axis.text.y=element_text(size=12,face="bold"))+
theme(axis.title.x =element_text(size=12,face="bold"))+
theme(axis.title =element_text(size=12,face="bold"))+
theme(axis.title.y =element_text(size=12,face="bold"))
ggsave(paste0(output.dir,regression.folder,"Field_Richness_Max_respiration_rate_",ideal.num.segments,"_",Sys.Date(),".pdf"),width = 7.38, height = 7.38)
summary(lm(my.formula))
AIC = AIC(lm(my.formula))
print("AIC")
AIC
```
#### Incubation
```{r maxinc3, echo=FALSE,,warning=FALSE, message=FALSE}
all.incubation.peaks = all.incubation[order(all.incubation$Total_number_of_peaks),]
field.step = (max(all.incubation.peaks$Total_number_of_peaks)- min(all.incubation.peaks$Total_number_of_peaks))/(ideal.num.segments)
peak.segments = as.data.frame(matrix(NA,ncol = 4,nrow = ideal.num.segments))
colnames(peak.segments)= c("Low.boundary","High.boundary","Max.resp","Mid.peaks")
temp.low = min(all.incubation.peaks$Total_number_of_peaks)
for (i in 1:ideal.num.segments){
if (1 ==10){
temp.high = temp.low + field.step
temp.high = plyr::round_any(temp.high, 0.0001, f = ceiling)
temp.dat = all.incubation.peaks[which(all.incubation.peaks$Total_number_of_peaks >= temp.low & all.incubation.peaks$Total_number_of_peaks <= temp.high),]
}else {
temp.high = temp.low + field.step
temp.dat = all.incubation.peaks[which(all.incubation.peaks$Total_number_of_peaks >= temp.low & all.incubation.peaks$Total_number_of_peaks <= temp.high),]
}
if (nrow(temp.dat) > 0){
temp.rate = max(all.incubation.peaks$rate_mg_per_L_per_h[which(all.incubation.peaks$Total_number_of_peaks >= temp.low & all.incubation.peaks$Total_number_of_peaks <= temp.high)])
temp.mid =  temp.dat$Total_number_of_peaks[which(temp.dat$rate_mg_per_L_per_h %in% temp.rate)]
peak.segments$Low.boundary[i] = temp.low
peak.segments$High.boundary[i] = temp.high
peak.segments$Max.resp[i] = temp.rate
peak.segments$Mid.peaks[i] = temp.mid
temp.low = temp.high
} else if (nrow(temp.dat) == 0){
temp.rate = NA
temp.mid =  NA
peak.segments$Low.boundary[i] = temp.low
peak.segments$High.boundary[i] = temp.high
peak.segments$Max.resp[i] = temp.rate
peak.segments$Mid.peaks[i] = temp.mid
temp.low = temp.high
}
}
## Plot exp relationships
x = peak.segments$Mid.peaks
y = peak.segments$Max.resp
label.x = "Richness"
label.y = "Max_Resp_rate_mg_per_L_per_h"
dfi=as.data.frame(cbind(y,x))
names(dfi)[1]="y";names(dfi)[2]="x"
dfi=na.omit(dfi)
#Plots
library (ggpmisc)
my.formula <- y ~ x
ggplot(dfi, aes(x = x, y = y)) +
coord_cartesian( ylim = c(-5,82))+
# coord_cartesian()+
geom_point(size = 5,color = "#32287d") +
geom_point(data=all.incubation.peaks, aes(x=Total_number_of_peaks, y= rate_mg_per_L_per_h), size = 3, color= '#f2b78a') +
geom_point(size = 5, color = "#d95f02") +
geom_smooth(method = "lm", se=TRUE, formula = my.formula) +
stat_poly_eq(formula = my.formula,label.y = "top",label.x = "left", aes(label = paste( ..rr.label..,..eq.label.., sep = "~~~"),size=4),
parse = TRUE)+stat_fit_glance(data=dfi, method = 'lm',
method.args = list(formula = my.formula),
geom = 'text',
aes(label =paste("p = ",signif(..p.value.., digits = 2), sep = ""),size=4),label.y = "top",label.x = "right")+
theme_bw()+theme(legend.title = element_blank(),  legend.background = element_rect(fill = 'NA'), legend.text = element_text(size=12,face="bold"))+labs(y = label.y, x = label.x)+
#theme(legend.position=c(0.7,0.2))+
theme(axis.text.x=element_text(size=12,face="bold"))+theme(axis.text.x=element_text(colour = c("black","black")))+
#theme(aspect.ratio=1)+
theme(axis.text.y=element_text(size=12,face="bold"))+
theme(axis.title.x =element_text(size=12,face="bold"))+
theme(axis.title =element_text(size=12,face="bold"))+
theme(axis.title.y =element_text(size=12,face="bold"))
ggsave(paste0(output.dir,regression.folder,"Incubation_Richness_Max_respiration_rate_",ideal.num.segments,"_",Sys.Date(),".pdf"),width = 7.38, height = 7.38)
summary(lm(my.formula))
AIC = AIC(lm(my.formula))
print("AIC")
AIC
```
### Richness vs NPOC
#### Field
```{r max, echo=FALSE,,warning=FALSE, message=FALSE}
#####################################################################
#### Defining the segments
####################################################################
ideal.num.segments = 10
#####################################################################
all.field.peaks = all.field[order(all.field$X00681_NPOC_mg_per_L_as_C),]
field.step = (max(all.field.peaks$X00681_NPOC_mg_per_L_as_C)- min(all.field.peaks$X00681_NPOC_mg_per_L_as_C))/(ideal.num.segments)
peak.segments = as.data.frame(matrix(NA,ncol = 4,nrow = ideal.num.segments))
colnames(peak.segments)= c("Low.boundary","High.boundary","Max.resp","Mid.peaks")
temp.low = min(all.field.peaks$X00681_NPOC_mg_per_L_as_C)
for (i in 1:ideal.num.segments){
if (i ==10){
temp.high = temp.low + field.step
temp.high = plyr::round_any(temp.high, 0.0001, f = ceiling)
temp.dat = all.field.peaks[which(all.field.peaks$X00681_NPOC_mg_per_L_as_C >= temp.low & all.field.peaks$X00681_NPOC_mg_per_L_as_C <= temp.high),]
}else{
temp.high = temp.low + field.step
temp.dat = all.field.peaks[which(all.field.peaks$X00681_NPOC_mg_per_L_as_C >= temp.low & all.field.peaks$X00681_NPOC_mg_per_L_as_C <= temp.high),]
}
if (nrow(temp.dat) > 0){
temp.rate = max(all.field.peaks$Total_number_of_peaks[which(all.field.peaks$X00681_NPOC_mg_per_L_as_C >= temp.low & all.field.peaks$X00681_NPOC_mg_per_L_as_C <= temp.high)])
temp.mid =  temp.dat$X00681_NPOC_mg_per_L_as_C[which(temp.dat$Total_number_of_peaks %in% temp.rate)]
peak.segments$Low.boundary[i] = temp.low
peak.segments$High.boundary[i] = temp.high
peak.segments$Max.resp[i] = temp.rate
peak.segments$Mid.peaks[i] = temp.mid
temp.low = temp.high
} else if (nrow(temp.dat) == 0){
temp.rate = NA
temp.mid =  NA
peak.segments$Low.boundary[i] = temp.low
peak.segments$High.boundary[i] = temp.high
peak.segments$Max.resp[i] = temp.rate
peak.segments$Mid.peaks[i] = temp.mid
temp.low = temp.high
}
}
## Plot exp relationships
x = peak.segments$Mid.peaks
y = peak.segments$Max.resp
label.x = "NPOC_mg_C_per_L"
label.y = "Max_Total_number_of_peaks"
dfi=as.data.frame(cbind(y,x))
names(dfi)[1]="y";names(dfi)[2]="x"
dfi=na.omit(dfi)
#Plots
library (ggpmisc)
my.formula <- y ~ x
ggplot(dfi, aes(x = x, y = y)) +
# coord_cartesian( ylim = c(-5,82))+
coord_cartesian()+
geom_point(size = 5,color = "#32287d") +
geom_point(data=all.field.peaks, aes(x=X00681_NPOC_mg_per_L_as_C, y= Total_number_of_peaks), size = 3, color= "#a29bd5") +
geom_point(size = 5,color = "#32287d") +
geom_smooth(method = "lm", se=TRUE, formula = my.formula) +
stat_poly_eq(formula = my.formula,label.y = "top",label.x = "left", aes(label = paste( ..rr.label..,..eq.label.., sep = "~~~"),size=4),
parse = TRUE)+stat_fit_glance(data=dfi, method = 'lm',
method.args = list(formula = my.formula),
geom = 'text',
aes(label =paste("p = ",signif(..p.value.., digits = 2), sep = ""),size=4),label.y = "top",label.x = "right")+
theme_bw()+theme(legend.title = element_blank(),  legend.background = element_rect(fill = 'NA'), legend.text = element_text(size=12,face="bold"))+labs(y = label.y, x = label.x)+
#theme(legend.position=c(0.7,0.2))+
theme(axis.text.x=element_text(size=12,face="bold"))+theme(axis.text.x=element_text(colour = c("black","black")))+
#theme(aspect.ratio=1)+
theme(axis.text.y=element_text(size=12,face="bold"))+
theme(axis.title.x =element_text(size=12,face="bold"))+
theme(axis.title =element_text(size=12,face="bold"))+
theme(axis.title.y =element_text(size=12,face="bold"))
ggsave(paste0(output.dir,regression.folder,"Field_NPOC_Max_Richness_",ideal.num.segments,"_",Sys.Date(),".pdf"),width = 7.38, height = 7.38)
summary(lm(my.formula))
AIC = AIC(lm(my.formula))
print("AIC")
AIC
```
#### Incubation
```{r maxinc, echo=FALSE,,warning=FALSE, message=FALSE}
all.incubation.peaks = all.incubation[order(all.incubation$X00681_NPOC_mg_per_L_as_C),]
field.step = (max(all.incubation.peaks$X00681_NPOC_mg_per_L_as_C)- min(all.incubation.peaks$X00681_NPOC_mg_per_L_as_C))/(ideal.num.segments)
peak.segments = as.data.frame(matrix(NA,ncol = 4,nrow = ideal.num.segments))
colnames(peak.segments)= c("Low.boundary","High.boundary","Max.resp","Mid.peaks")
temp.low = min(all.incubation.peaks$X00681_NPOC_mg_per_L_as_C)
for (i in 1:ideal.num.segments){
if (i ==10){
temp.high = temp.low + field.step
temp.high = plyr::round_any(temp.high, 0.0001, f = ceiling)
temp.dat = all.incubation.peaks[which(all.incubation.peaks$X00681_NPOC_mg_per_L_as_C >= temp.low & all.incubation.peaks$X00681_NPOC_mg_per_L_as_C <= temp.high),]
}else{
temp.high = temp.low + field.step
temp.dat = all.incubation.peaks[which(all.incubation.peaks$X00681_NPOC_mg_per_L_as_C >= temp.low & all.incubation.peaks$X00681_NPOC_mg_per_L_as_C <= temp.high),]
}
if (nrow(temp.dat) > 0){
temp.rate = max(all.incubation.peaks$Total_number_of_peaks[which(all.incubation.peaks$X00681_NPOC_mg_per_L_as_C >= temp.low & all.incubation.peaks$X00681_NPOC_mg_per_L_as_C <= temp.high)])
temp.mid =  temp.dat$X00681_NPOC_mg_per_L_as_C[which(temp.dat$Total_number_of_peaks %in% temp.rate)]
peak.segments$Low.boundary[i] = temp.low
peak.segments$High.boundary[i] = temp.high
peak.segments$Max.resp[i] = temp.rate
peak.segments$Mid.peaks[i] = temp.mid
temp.low = temp.high
} else if (nrow(temp.dat) == 0){
temp.rate = NA
temp.mid =  NA
peak.segments$Low.boundary[i] = temp.low
peak.segments$High.boundary[i] = temp.high
peak.segments$Max.resp[i] = temp.rate
peak.segments$Mid.peaks[i] = temp.mid
temp.low = temp.high
}
}
## Plot exp relationships
x = peak.segments$Mid.peaks
y = peak.segments$Max.resp
label.x = "NPOC_mg_C_per_L"
label.y = "Max_Total_number_of_peaks"
dfi=as.data.frame(cbind(y,x))
names(dfi)[1]="y";names(dfi)[2]="x"
dfi=na.omit(dfi)
#Plots
library (ggpmisc)
my.formula <- y ~ x
ggplot(dfi, aes(x = x, y = y)) +
# coord_cartesian( ylim = c(-5,82))+
coord_cartesian()+
geom_point(size = 5,color = "#32287d") +
geom_point(data=all.incubation.peaks, aes(x=X00681_NPOC_mg_per_L_as_C, y= Total_number_of_peaks), size = 3,color= '#f2b78a') +
geom_point(size = 5, color = "#d95f02") +
geom_smooth(method = "lm", se=TRUE, formula = my.formula) +
stat_poly_eq(formula = my.formula,label.y = "top",label.x = "left", aes(label = paste( ..rr.label..,..eq.label.., sep = "~~~"),size=4),
parse = TRUE)+stat_fit_glance(data=dfi, method = 'lm',
method.args = list(formula = my.formula),
geom = 'text',
aes(label =paste("p = ",signif(..p.value.., digits = 2), sep = ""),size=4),label.y = "top",label.x = "right")+
theme_bw()+theme(legend.title = element_blank(),  legend.background = element_rect(fill = 'NA'), legend.text = element_text(size=12,face="bold"))+labs(y = label.y, x = label.x)+
#theme(legend.position=c(0.7,0.2))+
theme(axis.text.x=element_text(size=12,face="bold"))+theme(axis.text.x=element_text(colour = c("black","black")))+
#theme(aspect.ratio=1)+
theme(axis.text.y=element_text(size=12,face="bold"))+
theme(axis.title.x =element_text(size=12,face="bold"))+
theme(axis.title =element_text(size=12,face="bold"))+
theme(axis.title.y =element_text(size=12,face="bold"))
ggsave(paste0(output.dir,regression.folder,"Incubation_NPOC_Max_Richness_",ideal.num.segments,"_",Sys.Date(),".pdf"),width = 7.38, height = 7.38)
summary(lm(my.formula))
AIC = AIC(lm(my.formula))
print("AIC")
AIC
```
## Multiple regressions with max respiration values
### Respiration vs Richness + 1/NPOC + Richness/NPOC
#### Field
```{r regress1456, echo=FALSE,,warning=FALSE, message=FALSE}
# Field
# Defining the segments
ideal.num.segments = 10
all.field.peaks = all.field[order(all.field$RichoverDOC),]
field.step = (max(all.field.peaks$RichoverDOC)- min(all.field.peaks$RichoverDOC))/(ideal.num.segments)
peak.segments = as.data.frame(matrix(NA,ncol = 8,nrow = ideal.num.segments))
colnames(peak.segments)= c("Low.boundary","High.boundary","Max_rate_mg_per_L_per_h","Mid.peaks","Total_number_of_peaks","X00681_NPOC_mg_per_L_as_C", "RichoverDOC" ,"Sample_ID")
temp.low = min(all.field.peaks$RichoverDOC)
for (i in 1:ideal.num.segments){
temp.high = temp.low + field.step
temp.dat = all.field.peaks[which(all.field.peaks$RichoverDOC >= temp.low & all.field.peaks$RichoverDOC <= temp.high),]
if (nrow(temp.dat) > 0){
temp.rate = max(all.field.peaks$rate_mg_per_L_per_h[which(all.field.peaks$RichoverDOC >= temp.low & all.field.peaks$RichoverDOC <= temp.high)])
temp.mid =  temp.dat$RichoverDOC[which(temp.dat$rate_mg_per_L_per_h %in% temp.rate)]
peak.segments$Low.boundary[i] = temp.low
peak.segments$High.boundary[i] = temp.high
peak.segments$Max_rate_mg_per_L_per_h[i] = temp.rate
peak.segments$Mid.peaks[i] = temp.mid
peak.segments$Total_number_of_peaks[i] = temp.dat$Total_number_of_peaks[which(temp.dat$rate_mg_per_L_per_h %in% temp.rate)]
peak.segments$X00681_NPOC_mg_per_L_as_C[i] = temp.dat$X00681_NPOC_mg_per_L_as_C[which(temp.dat$rate_mg_per_L_per_h %in% temp.rate)]
peak.segments$Sample_ID[i] = temp.dat$Sample_ID[which(temp.dat$rate_mg_per_L_per_h %in% temp.rate)]
peak.segments$RichoverDOC[i] = peak.segments$Total_number_of_peaks[i]/peak.segments$X00681_NPOC_mg_per_L_as_C[i]
temp.low = temp.high
} else if (nrow(temp.dat) == 0){
temp.rate = NA
temp.mid =  NA
peak.segments$Low.boundary[i] = temp.low
peak.segments$High.boundary[i] = temp.high
peak.segments$Max_rate_mg_per_L_per_h[i] = temp.rate
peak.segments$Mid.peaks[i] = temp.mid
peak.segments$Total_number_of_peaks[i] = NA
peak.segments$X00681_NPOC_mg_per_L_as_C[i] = NA
peak.segments$Sample_ID[i] = NA
peak.segments$RichoverDOC[i] = NA
temp.low = temp.high
}
}
```
```{r regress18456, echo=TRUE,,warning=FALSE, message=FALSE}
peak.segments$overNPOC = 1 / peak.segments$X00681_NPOC_mg_per_L_as_C
summary(lm(log(peak.segments$Max_rate_mg_per_L_per_h) ~
peak.segments$Total_number_of_peaks +
peak.segments$overNPOC +
peak.segments$RichoverDOC))
AIC = AIC(lm(log(peak.segments$Max_rate_mg_per_L_per_h) ~
peak.segments$Total_number_of_peaks +
peak.segments$overNPOC +
peak.segments$RichoverDOC))
print("AIC")
AIC
rm(peak.segments)
```
#### Incubation
```{r regress1986, echo=FALSE,,warning=FALSE, message=FALSE}
# Incubation
# Defining the segments
ideal.num.segments = 10
all.incubation.peaks = all.incubation[order(all.incubation$RichoverDOC),]
field.step = (max(all.incubation.peaks$RichoverDOC)- min(all.incubation.peaks$RichoverDOC))/(ideal.num.segments)
peak.segments = as.data.frame(matrix(NA,ncol = 8,nrow = ideal.num.segments))
colnames(peak.segments)= c("Low.boundary","High.boundary","Max_rate_mg_per_L_per_h","Mid.peaks","Total_number_of_peaks","X00681_NPOC_mg_per_L_as_C", "RichoverDOC" ,"Sample_ID")
temp.low = min(all.incubation.peaks$RichoverDOC)
for (i in 1:ideal.num.segments){
temp.high = temp.low + field.step
temp.dat = all.incubation.peaks[which(all.incubation.peaks$RichoverDOC >= temp.low & all.incubation.peaks$RichoverDOC <= temp.high),]
if (nrow(temp.dat) > 0){
temp.rate = max(all.incubation.peaks$rate_mg_per_L_per_h[which(all.incubation.peaks$RichoverDOC >= temp.low & all.incubation.peaks$RichoverDOC <= temp.high)])
temp.mid =  temp.dat$RichoverDOC[which(temp.dat$rate_mg_per_L_per_h %in% temp.rate)]
peak.segments$Low.boundary[i] = temp.low
peak.segments$High.boundary[i] = temp.high
peak.segments$Max_rate_mg_per_L_per_h[i] = temp.rate
peak.segments$Mid.peaks[i] = temp.mid
peak.segments$Total_number_of_peaks[i] = temp.dat$Total_number_of_peaks[which(temp.dat$rate_mg_per_L_per_h %in% temp.rate)]
peak.segments$X00681_NPOC_mg_per_L_as_C[i] = temp.dat$X00681_NPOC_mg_per_L_as_C[which(temp.dat$rate_mg_per_L_per_h %in% temp.rate)]
peak.segments$Sample_ID[i] = as.character(temp.dat$Sample_ID[which(temp.dat$rate_mg_per_L_per_h %in% temp.rate)])
peak.segments$RichoverDOC[i] = peak.segments$Total_number_of_peaks[i]/peak.segments$X00681_NPOC_mg_per_L_as_C[i]
temp.low = temp.high
} else if (nrow(temp.dat) == 0){
temp.rate = NA
temp.mid =  NA
peak.segments$Low.boundary[i] = temp.low
peak.segments$High.boundary[i] = temp.high
peak.segments$Max_rate_mg_per_L_per_h[i] = temp.rate
peak.segments$Mid.peaks[i] = temp.mid
peak.segments$Total_number_of_peaks[i] = NA
peak.segments$X00681_NPOC_mg_per_L_as_C[i] = NA
peak.segments$Sample_ID[i] = NA
peak.segments$RichoverDOC[i] = NA
temp.low = temp.high
}
}
peak.segment.incubation = peak.segments
```
```{r regress184569, echo=TRUE,,warning=FALSE, message=FALSE}
peak.segment.incubation$overNPOC = 1 / peak.segment.incubation$X00681_NPOC_mg_per_L_as_C
summary(lm(log(peak.segment.incubation$Max_rate_mg_per_L_per_h) ~
peak.segment.incubation$Total_number_of_peaks +
peak.segment.incubation$overNPOC +
peak.segment.incubation$RichoverDOC))
AIC(lm(log(peak.segment.incubation$Max_rate_mg_per_L_per_h) ~
peak.segment.incubation$Total_number_of_peaks +
peak.segment.incubation$overNPOC +
peak.segment.incubation$RichoverDOC))
print("AIC")
AIC
rm(peak.segment.incubation)
```
### Respiration vs Richness + NPOC + Richness * NPOC
#### Field
```{r regress145936, echo=FALSE,,warning=FALSE, message=FALSE}
# Field
# Defining the segments
ideal.num.segments = 10
all.field.peaks = all.field[order(all.field$DOCRich),]
field.step = (max(all.field.peaks$DOCRich)- min(all.field.peaks$DOCRich))/(ideal.num.segments)
peak.segments = as.data.frame(matrix(NA,ncol = 8,nrow = ideal.num.segments))
colnames(peak.segments)= c("Low.boundary","High.boundary","Max_rate_mg_per_L_per_h","Mid.peaks","Total_number_of_peaks","X00681_NPOC_mg_per_L_as_C", "DOCRich" ,"Sample_ID")
temp.low = min(all.field.peaks$DOCRich)
for (i in 1:ideal.num.segments){
temp.high = temp.low + field.step
temp.dat = all.field.peaks[which(all.field.peaks$DOCRich >= temp.low & all.field.peaks$DOCRich <= temp.high),]
if (nrow(temp.dat) > 0){
temp.rate = max(all.field.peaks$rate_mg_per_L_per_h[which(all.field.peaks$DOCRich >= temp.low & all.field.peaks$DOCRich <= temp.high)])
temp.mid =  temp.dat$DOCRich[which(temp.dat$rate_mg_per_L_per_h %in% temp.rate)]
peak.segments$Low.boundary[i] = temp.low
peak.segments$High.boundary[i] = temp.high
peak.segments$Max_rate_mg_per_L_per_h[i] = temp.rate
peak.segments$Mid.peaks[i] = temp.mid
peak.segments$Total_number_of_peaks[i] = temp.dat$Total_number_of_peaks[which(temp.dat$rate_mg_per_L_per_h %in% temp.rate)]
peak.segments$X00681_NPOC_mg_per_L_as_C[i] = temp.dat$X00681_NPOC_mg_per_L_as_C[which(temp.dat$rate_mg_per_L_per_h %in% temp.rate)]
peak.segments$Sample_ID[i] = temp.dat$Sample_ID[which(temp.dat$rate_mg_per_L_per_h %in% temp.rate)]
peak.segments$DOCRich[i] = peak.segments$Total_number_of_peaks[i]*peak.segments$X00681_NPOC_mg_per_L_as_C[i]
temp.low = temp.high
} else if (nrow(temp.dat) == 0){
temp.rate = NA
temp.mid =  NA
peak.segments$Low.boundary[i] = temp.low
peak.segments$High.boundary[i] = temp.high
peak.segments$Max_rate_mg_per_L_per_h[i] = temp.rate
peak.segments$Mid.peaks[i] = temp.mid
peak.segments$Total_number_of_peaks[i] = NA
peak.segments$X00681_NPOC_mg_per_L_as_C[i] = NA
peak.segments$Sample_ID[i] = NA
peak.segments$DOCRich[i] = NA
temp.low = temp.high
}
}
```
```{r regress1845696, echo=TRUE,,warning=FALSE, message=FALSE}
summary(lm(log(peak.segments$Max_rate_mg_per_L_per_h) ~
peak.segments$Total_number_of_peaks +
peak.segments$X00681_NPOC_mg_per_L_as_C +
peak.segments$DOCRich))
AIC(lm(log(peak.segments$Max_rate_mg_per_L_per_h) ~
peak.segments$Total_number_of_peaks +
peak.segments$X00681_NPOC_mg_per_L_as_C +
peak.segments$DOCRich))
print("AIC")
AIC
rm(peak.segments)
```
#### Incubation
```{r regress19865, echo=FALSE,,warning=FALSE, message=FALSE}
# Incubation
# Defining the segments
ideal.num.segments = 10
all.incubation.peaks = all.incubation[order(all.incubation$DOCRich),]
field.step = (max(all.incubation.peaks$DOCRich)- min(all.incubation.peaks$DOCRich))/(ideal.num.segments)
peak.segments = as.data.frame(matrix(NA,ncol = 8,nrow = ideal.num.segments))
colnames(peak.segments)= c("Low.boundary","High.boundary","Max_rate_mg_per_L_per_h","Mid.peaks","Total_number_of_peaks","X00681_NPOC_mg_per_L_as_C", "DOCRich" ,"Sample_ID")
temp.low = min(all.incubation.peaks$DOCRich)
for (i in 1:ideal.num.segments){
temp.high = temp.low + field.step
temp.dat = all.incubation.peaks[which(all.incubation.peaks$DOCRich >= temp.low & all.incubation.peaks$DOCRich <= temp.high),]
if (nrow(temp.dat) > 0){
temp.rate = max(all.incubation.peaks$rate_mg_per_L_per_h[which(all.incubation.peaks$DOCRich >= temp.low & all.incubation.peaks$DOCRich <= temp.high)])
temp.mid =  temp.dat$DOCRich[which(temp.dat$rate_mg_per_L_per_h %in% temp.rate)]
peak.segments$Low.boundary[i] = temp.low
peak.segments$High.boundary[i] = temp.high
peak.segments$Max_rate_mg_per_L_per_h[i] = temp.rate
peak.segments$Mid.peaks[i] = temp.mid
peak.segments$Total_number_of_peaks[i] = temp.dat$Total_number_of_peaks[which(temp.dat$rate_mg_per_L_per_h %in% temp.rate)]
peak.segments$X00681_NPOC_mg_per_L_as_C[i] = temp.dat$X00681_NPOC_mg_per_L_as_C[which(temp.dat$rate_mg_per_L_per_h %in% temp.rate)]
peak.segments$Sample_ID[i] = as.character(temp.dat$Sample_ID[which(temp.dat$rate_mg_per_L_per_h %in% temp.rate)])
peak.segments$DOCRich[i] = peak.segments$Total_number_of_peaks[i]*peak.segments$X00681_NPOC_mg_per_L_as_C[i]
temp.low = temp.high
} else if (nrow(temp.dat) == 0){
temp.rate = NA
temp.mid =  NA
peak.segments$Low.boundary[i] = temp.low
peak.segments$High.boundary[i] = temp.high
peak.segments$Max_rate_mg_per_L_per_h[i] = temp.rate
peak.segments$Mid.peaks[i] = temp.mid
peak.segments$Total_number_of_peaks[i] = NA
peak.segments$X00681_NPOC_mg_per_L_as_C[i] = NA
peak.segments$Sample_ID[i] = NA
peak.segments$DOCRich[i] = NA
temp.low = temp.high
}
}
peak.segment.incubation = peak.segments
```
```{r regress1845419, echo=TRUE,,warning=FALSE, message=FALSE}
summary(lm(log(peak.segment.incubation$Max_rate_mg_per_L_per_h) ~
peak.segment.incubation$Total_number_of_peaks +
peak.segment.incubation$X00681_NPOC_mg_per_L_as_C +
peak.segment.incubation$DOCRich))
AIC = AIC(lm(log(peak.segment.incubation$Max_rate_mg_per_L_per_h) ~
peak.segment.incubation$Total_number_of_peaks +
peak.segment.incubation$X00681_NPOC_mg_per_L_as_C +
peak.segment.incubation$DOCRich))
print("AIC")
AIC
```
